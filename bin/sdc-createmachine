#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2013 Joyent, Inc.  All rights reserved.

var fs = require('fs');
var https = require('https');
var path = require('path');
var url = require('url');

var common = require('../lib/cli_common');



// --- Globals

var Options = {
    'account': String,
    'api-version': String,
    'debug': Boolean,
    'image': String,
    'enable-firewall': Boolean,
    'far': String,
    'help': Boolean,
    'keyId': String,
    'metadata': [String, Array],
    'metadata-file': [String, Array],
    'name': String,
    'near': String,
    'networks': [String, Array],
    'package': String,
    'script': path,
    'strict-locality': Boolean,
    'tag': [String, Array],
    'url': url,
    'version': Boolean,
    'verbose': Boolean,
    'user': String,
    'role': String
};

var ShortOptions = {
    'a': ['--account'],
    'd': ['--debug'],
    'e': ['--image'],  // DEPRECATED
    'i': ['--image'],
    'f': ['--enable-firewall'],
    'h': ['--help'],
    '?': ['--help'],
    'k': ['--keyId'],
    'm': ['--metadata'],
    'M': ['--metadata-file'],
    'n': ['--name'],
    'p': ['--package'],
    's': ['--script'],
    't': ['--tag'],
    'u': ['--url'],
    'v': ['--verbose'],
    'w': ['--networks'],
    'A': ['--user']
};

var usageStr = common.buildUsageString(Options);
usageStr += common.buildDetailedUsageString(Options, {
    'name': 'friendly name (may contain letters, numbers, dashes, and periods)'
});

// --- Mainline

common.parseArguments(Options, ShortOptions, function (parsed) {
    var opts = {};
    var tmp;
    var k;
    if (parsed.image) {
        opts.image = parsed.image;
    }
    if (parsed.name)  {
        opts.name = parsed.name;
    }
    if (parsed['package']) {
        opts['package'] = parsed['package'];
    }
    if (typeof (parsed['enable-firewall']) !== 'undefined') {
        opts.firewall_enabled = parsed['enable-firewall'];
    }

    if (parsed.tag) {
        tmp = common.parseMetadata(parsed.tag, false);
        for (k in tmp) {
            opts['tag.' + k] = tmp[k];
        }
    }

    tmp = {};
    if (parsed['metadata-file']) {
        tmp = common.mergeObjects(tmp, common.parseMetadata(
            parsed['metadata-file'], true));
    }
    if (parsed['metadata']) {
        tmp = common.mergeObjects(tmp, common.parseMetadata(
            parsed['metadata'], false));
    }
    for (k in tmp) {
        opts['metadata.' + k] = tmp[k];
    }

    if (parsed.script) {
        var us = fs.readFileSync(parsed.script, 'utf-8');
        opts['metadata.user-script'] = us.toString();
    }

    if (parsed.networks) {
        opts.networks = parsed.networks;
    }

    if (parsed.near || parsed.far) {
        opts.locality = {};

        if (parsed.near) {
            opts.locality.near = parsed.near.split(',');
        }

        if (parsed.far) {
            opts.locality.far = parsed.far.split(',');
        }

        if (parsed['strict-locality']) {
            opts.locality.strict = parsed['strict-locality'];
        }
    }

    var client = common.newClient(parsed);
    client.createMachine(opts, common.callback);
}, usageStr);
