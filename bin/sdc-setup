#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2012 Joyent, Inc.  All rights reserved.

var fs = require('fs');
var path = require('path');
var tty = require('tty');
var URL = require('url');
var util = require('util');
var nopt = require('nopt');
var restify = require('restify');
var bunyan = require('bunyan');

var common = require('../lib/cli_common');
var CloudAPI = require('../lib/index').CloudAPI;



///--- Globals

var DEF_KEY = process.env.HOME + '/.ssh/id_rsa.pub';

var Options = {
    'debug': Boolean,
    'help': Boolean
};

var ShortOptions = {
    'd': ['--debug'],
    'h': ['--help']
};

var buffer = '';

var usageStr = common.buildUsageString(Options);
usageStr += ' url';


///--- Internal Functions

// Totally ripped off from npm. Thanks isaacs@!

function prompt(p, def, silent, cb) {
    if (!cb) {
        cb = silent;
        silent = false;
    }
    if (!cb) {
        cb = def;
        def = null;
    }
    if (def) {
        p += '('+(silent ? '<hidden>' : def)+') ';
    }
    var r = (silent ? silentRead : read).bind(null, def, cb);
    if (!process.stdout.write(p)) process.stdout.on('drain', function D() {
        process.stdout.removeListener('drain', D);
        r();
    });
    else r();
}

function read(def, cb) {
    var stdin = process.openStdin(),
        val = '';
    stdin.resume();
    stdin.setEncoding('utf8');
    stdin.on('error', cb);
    stdin.on('data', function D(chunk) {
        val += buffer + chunk;
        buffer = '';
        val = val.replace(/\r/g, '');
        if (val.indexOf('\n') !== -1) {
            if (val !== '\n') val = val.replace(/^\n+/, '');
            buffer = val.substr(val.indexOf('\n'));
            val = val.substr(0, val.indexOf('\n'));
            stdin.pause();
            stdin.removeListener('data', D);
            stdin.removeListener('error', cb);
            val = val.trim() || def;
            cb(null, val);
        }
    });
}

function silentRead(def, cb) {
    var stdin = process.openStdin(),
        val = '';
    if (process.stdin.setRawMode) {
        process.stdin.setRawMode(true);
    } else {
        tty.setRawMode(true);
    }
    stdin.resume();
    stdin.on('error', cb);
    stdin.on('data', function D(c) {
        c = '' + c;
        switch (c) {
        case '\n': case '\r': case '\r\n': case '\u0004':
            if (process.stdin.setRawMode) {
                process.stdin.setRawMode(false);
            } else {
                tty.setRawMode(false);
            }
            stdin.removeListener('data', D);
            stdin.removeListener('error', cb);
            val = val.trim() || def;
            process.stdout.write('\n');
            stdin.pause();
            return cb(null, val);
        case '\u0003': case '\0':
            return cb('cancelled');
        default:
            val += buffer + c;
            buffer = '';
            // This does not always return a value INTENTIONALLY
        }
    });
}


function dumpEnvVars(sdc_url, account, keyId) {
    console.log('\n\nIf you set these environment variables, your life will' +
              ' be easier:');
    console.log('export SDC_CLI_URL=' + sdc_url);
    console.log('export SDC_CLI_ACCOUNT=' + account);
}


function uploadKey(client, sdc_url, account) {
    return prompt('SSH public key: ', DEF_KEY, function (err, file) {
        if (err) {
            console.error('Unable to read key: ' + err.message);
            process.exit(5);
        }
        var key = common.loadKey(file);

        // So that SSH agent support automagically works (if using the CLI),
        // pick the name to be the same as what SSH Agent will pass in the
        // comment field (well, the file name, not the full path).
        var keyName = file.split('/');
        var opts = {
            name: keyName[keyName.length - 1].split('.')[0],
            key: key
        };

        client.createKey(opts, function (err2, key2) {
            if (err2) {
                if (err2.httpCode >= 500) {
                    if (err2.details && err2.details.body) {
                        try {
                            console.error(
                                JSON.parse(err2.details.body).message);
                        } catch (e) {
                            console.error(err2.message);
                        }
                    }
                } else {
                    console.error(err2.message);
                }
                process.exit(3);
            }

            dumpEnvVars(sdc_url, account, key2.name);
            console.log('export SDC_CLI_IDENTITY=' +
                file.replace(/\.pub$/, ''));
            process.exit(0);
        });
    });
}


///--- Mainline

var parsed = nopt(Options, ShortOptions, process.argv, 2);
if (parsed.help) {
    common.usage(usageStr);
}

if (parsed.argv.remain.length < 1) {
    common.usage(usageStr, 1, 'url of SmartDataCenter CloudAPI required');
}
var url = parsed.argv.remain[0];


prompt('Username (login): ', process.env.USER, function (err, username) {
    if (err) {
        console.error('Unable to read username: ' + err.message);
        process.exit(5);
    }

    return prompt('Password: ', null, true, function (err2, password) {
        if (err2) {
            console.error('Unable to read password: ' + err2.message);
            process.exit(5);
        }

        if (!password || !password.length) {
            console.error('You did not enter a password.');
            process.exit(6);
        }

        var client = new CloudAPI({
            url: url,
            account: username,
            noCache: true,
            username: username,
            password: password,
            logLevel: 'fatal'
        });

        return client.listKeys(function (err3, keys) {
            if (err3) {
                if (err3.code) {
                    if (err3.code === 'InvalidCredentials') {
                        console.error('The username or password you entered' +
                            ' is incorrect.');
                    } else {
                        console.error(
                            'Error communicating with SmartDataCenter: ' +
                            err3.message);
                    }
                } else if (err3.details && err3.details.statusCode) {
                    var details = err3.details;
                    if (details.statusCode === 301) {
                        if (details.headers && details.headers.location) {
                            var _url = URL.parse(details.headers.location);
                            console.error(
                                'SmartDataCenter is only available at: ' +
                                _url.protocol + '//' + _url.host);
                        }
                    }
                }
                process.exit(7);
            }

            if (keys.length) {
                console.log('The following keys exist in SmartDataCenter:');
                for (var i = 0; i < keys.length; i++) {
                    console.log('\t[' + (i + 1) + '] ' + keys[i].name);
                }

                function useExistingCb(err4, choice) {
                    if (err4) {
                        console.error('Unable to read choice: ' +
                                err4.message);
                        process.exit(8);
                    }
                    if (/^ye?s?/i.test(choice)) {
                        function done(name) {
                            dumpEnvVars(url, username, name);
                            console.log('\nYou\'ll additionally want to set ' +
                            'SDC_CLI_IDENTITY to the full path location of ' +
                            'the ssh key on your system (try ' +
                            'export SDC_CLI_IDENTITY=' +
                            process.env.HOME + '/.ssh/' + name + ').');
                            process.exit(0);
                        }

                        if (keys.length === 1) {
                            return done(keys[0].name);
                        }

                        return prompt('Select a key:', 1,
                            function (err5, choice2) {
                                if (err5) {
                                    console.error('Unable to read key number: '
                                        + err5.message);
                                    process.exit(8);
                                }

                                var index = parseInt(choice2, 10) - 1;
                                if (index < 0 || index >= keys.length) {
                                    console.error(index +
                                        ' is an invalid selection.');
                                    process.exit(8);
                                }

                                return done(keys[index].name);
                            });
                    } else {
                        return uploadKey(client, url, username);
                    }
                }

                return prompt('Would you like to use an existing key? ',
                      'yes', useExistingCb);

            } else {
                return uploadKey(client, url, username);
            }
        });
    });
});
