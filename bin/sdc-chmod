#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2014 Joyent, Inc.  All rights reserved.
var util = require('util');
var path = require('path');
var fs = require('fs');

var bunyan = require('bunyan');
var vasync = require('vasync');
var smartdc = require('../lib/cloudapi'),
    CloudAPI = smartdc.CloudAPI;

var shared = require('../lib/shared'),
    printErr = shared.printErr,
    commonCb = shared.commonCb,
    DEFAULT_OPTIONS = shared.DEFAULT_OPTIONS;

var cmdln = require('cmdln'),
    Cmdln = cmdln.Cmdln;
var auth = require('smartdc-auth');

var pkg = require('../package.json');
var name = 'sdc';
var log = bunyan.createLogger({
    name: name,
    serializers: bunyan.stdSerializers,
    stream: process.stderr,
    level: 'warn'
});



var dashdash = require('dashdash');

var options = DEFAULT_OPTIONS;


if (require.main === module) {

    var parser = dashdash.createParser({options: options});

    try {
        var opts = parser.parse(process.argv);
    } catch (e) {
        console.error('sdc-chmod: error: %s', e.message);
        process.exit(1);
    }

    if (opts.debug) {
        process.env.DEBUG = 1;
        log.level('trace');
        log.src = true;
    }

    // Use `parser.help()` for formatted options help.
    if (opts.help || !opts._args.length || opts._args[0] === 'help' ||
            opts._args.length !== 2) {
        var help = parser.help({includeEnv: true}).trimRight();
        console.log('Add role tags to SmartDC resources.\n\n' +
                'Usage: sdc-chmod [OPTIONS] -- [+-=]role resource\n\n' +
                'Role Tags: \n\n' +
                '+role: add the given role tag(s) to existing ones\n' +
                '-role: remove the given role tag(s) from existing ones\n' +
                '=role: set role tag to the given one(s)\n\n' +
                'Options:\n' + help);
        process.exit(0);
    }

    if (opts.version) {
        console.log('sdc-chmod', pkg.version);
        process.exit(0);
    }

    if (typeof (opts.keyId) === 'undefined') {
        console.error('Either -k or (env) SDC_KEY_ID must be specified');
        process.exit(1);
    }

    if (!opts.account) {
        console.error('Either -a or (env) SDC_ACCOUNT must be specified');
        process.exit(1);
    }

    if (!opts.url) {
        console.error('Either -u or (env) SDC_URL must be specified');
        process.exit(1);
    }

    opts.log = log;

    opts.sign = auth.cliSigner({
        keyId: opts.keyId,
        user: opts.account,
        subuser: opts.user
    });

    var resource = opts._args[1];

    var reset = false;
    var resetTo = [];
    var toRemove = [];
    var toAppend = [];

    /* JSSTYLED */
    var res = /^=(.*)$/.exec(opts._args[0]);
    if (res !== null) {
        reset = true;
        resetTo = res[1].split(',');
    } else {
        var app = /^\+(.*)$/.exec(opts._args[0]);
        if (app !== null) {
            toAppend = app[1].split(',');
        } else {
            var rem = /^-(.*)$/.exec(opts._args[0]);
            if (rem !== null) {
                toRemove = rem[1].split(',');
            }
        }
    }

    var cloudapi = new CloudAPI(opts);

    var funcs = [];
    var existing = [];
    if (!reset) {
        funcs.push(function _loadRoleTags(_, cb) {
            cloudapi.getRoleTags(resource, function (err, rt) {
                if (err) {
                    return cb(err);
                }
                existing = rt;
                return cb(null);
            });
        });

        funcs.push(function _removeRoleTags(_, cb) {
            if (existing.length && toRemove.length) {
                existing = existing.filter(function (r) {
                    return (toRemove.indexOf(r) === -1);
                });
            }
            return cb(null);
        });

        funcs.push(function _addRoleTags(_, cb) {
            if (toAppend.length) {
                existing = existing.concat(toAppend);
            }
            return cb(null);
        });
    } else {
        funcs.push(function _setRoleTags(_, cb) {
            resetTo = resetTo.filter(function (r) {
                return (r.length !== 0);
            });
            existing = resetTo;
            return cb(null);
        });
    }

    funcs.push(function _putRoleTags(_, cb) {
        cloudapi.setRoleTags(resource, existing, function (err, obj) {
            if (err) {
                return cb(err);
            }
            existing = obj['role-tag'];
            return cb(null);
        });
    });

    vasync.pipeline({funcs: funcs}, function (er, _) {
        if (er) {
            printErr(er);
            process.exit(1);
        }
        console.log(JSON.stringify(existing));
        process.exit(0);
    });

}
