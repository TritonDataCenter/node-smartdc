#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2013 Joyent, Inc.  All rights reserved.

var url = require('url');

var common = require('../lib/cli_common');



// --- Globals

var Options = {
    'account': String,
    'credentials': Boolean,
    'debug': Boolean,
    'dataset': String, // DEPRECATED
    'image': String,
    'help': Boolean,
    'keyId': String,
    'limit': Number,
    'memory': Number,
    'name': String,
    'offset': Number,
    'state': String,
    'tag': [String, Array],
    'type': String,
    'tombstone': Number,
    'url': url,
    'version': Boolean,
    'verbose': Boolean,
    'user': String,
    'role': String
};

var ShortOptions = {
    'a': ['--account'],
    'c': ['--credentials'],
    'b': ['--tombstone'],
    'd': ['--debug'],
    'e': ['--image'], // DEPRECATED
    'i': ['--image'],
    'h': ['--help'],
    '?': ['--help'],
    'k': ['--keyId'],
    'l': ['--limit'],
    'm': ['--memory'],
    'n': ['--name'],
    'o': ['--offset'],
    's': ['--state'],
    't': ['--tag'],
    'y': ['--type'],
    'u': ['--url'],
    'v': ['--verbose'],
    'A': ['--user']
};

var usageStr = common.buildUsageString(Options);
usageStr += common.buildDetailedUsageString(Options);

// --- Mainline

common.parseArguments(Options, ShortOptions, function (parsed) {

    var opts = {};
    var tags = {};
    if (parsed.credentials) {
        opts.credentials = parsed.credentials;
    }
    if (parsed.image) {
        opts.image = parsed.image;
    } else if (parsed.dataset) {
        opts.image = parsed.dataset;
    }
    if (typeof (parsed.limit) !== 'undefined') {
        opts.limit = parsed.limit;
    }
    if (typeof (parsed.memory) !== 'undefined') {
        opts.memory = parsed.memory;
    }
    if (parsed.name) {
        opts.name = parsed.name;
    }
    if (typeof (parsed.offset) !== 'undefined') {
        opts.offset = parsed.offset;
    }
    if (parsed.state) {
        opts.state = parsed.state;
    }
    if (typeof (parsed.tombstone) !== 'undefined') {
        opts.tombstone = parsed.tombstone;
    }
    if (parsed.type) {
        opts.type = parsed.type;
    }

    if (parsed.tag) {
        tags = parsed.tag.indexOf('*') !== -1 ? '*' :
            common.parseMetadata(parsed.tag, false);
    }

    var client = common.newClient(parsed);
    client.listMachines(opts, tags, function (err, obj, done) {
        if (err) {
            common.printErr(err);
            process.exit(3);
        }

        if (obj) {
            common.emit(JSON.stringify(obj, null, 2));
            if (!done) {
                console.error('Partial listing of machines. Try increasing ' +
                      'listing limit with sdc-listmachines --limit');
            }
            common.exit(0);
        }
    });

}, usageStr);
