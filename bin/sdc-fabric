#!/usr/bin/env node
/*
 * Copyright (c) 2015, Joyent, Inc.
 */

var clone = require('clone');
var cmdln = require('cmdln'),
    Cmdln = cmdln.Cmdln;
var path = require('path');
var shared = require('../lib/shared'),
    commonCb = shared.commonCb;
var util = require('util');



// --- Globals



var HELP_OPT = {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
};
var GENERAL_OPTS = [
    HELP_OPT
];
var OPTIONAL = {};
var OPTS = {
    description: {
        name: 'description',
        type: 'string',
        help: 'description'
    },
    no_internet_nat: {
        name: 'no_internet_nat',
        type: 'bool',
        help: 'don\'t provision an Internet NAT zone'
    },
    gateway: {
        names: ['gateway', 'g'],
        type: 'string',
        help: 'gateway'
    },
    name: {
        names: ['name', 'n'],
        type: 'string',
        help: 'name'
    },
    provision_end_ip: {
        name: 'provision_end_ip',
        type: 'string',
        help: 'provision_end_ip'
    },
    provision_start_ip: {
        name: 'provision_start_ip',
        type: 'string',
        help: 'provision_start_ip'
    },
    resolvers: {
        name: 'resolvers',
        type: 'arrayOfString',
        help: 'resolvers'
    },
    routes: {
        name: 'routes',
        type: 'string',
        help: 'routes'
    },
    subnet: {
        names: ['subnet', 's'],
        type: 'string',
        help: 'subnet'
    },
    vlan: {
        name: 'vlan_id',
        type: 'string',
        help: 'VLAN ID'
    },
    vlanFilter: {
        name: 'vlan_id',
        type: 'string',
        help: 'VLAN ID to filter by'
    }
};
var REQUIRED = {};

for (var opt in OPTS) {
    OPTIONAL[opt] = clone(OPTS[opt]);
    OPTIONAL[opt].help = OPTIONAL[opt].help + ' (optional)';
    REQUIRED[opt] = clone(OPTS[opt]);
    REQUIRED[opt].help = REQUIRED[opt].help + ' (required)';
}

var API_VERSION = '~7.3';



// --- FabricVLAN node-cmdln object

function FabricVLAN(top) {
    this.top = top;
    Cmdln.call(this, {
        name: 'sdc-fabric vlan',
        desc: 'Manage fabric VLANs'
    });
}
util.inherits(FabricVLAN, Cmdln);

FabricVLAN.prototype.init = function vlanInit(opts, args, callback) {
    this.cloudapi = this.top.cloudapi;
    Cmdln.prototype.init.apply(this, arguments);
};


FabricVLAN.prototype.do_list = function (subcmd, opts, args, callback) {
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }
    return this.cloudapi.listFabricVlans(commonCb);
};
FabricVLAN.prototype.do_list.options = GENERAL_OPTS;
FabricVLAN.prototype.do_list.help = (
    'List fabric VLANs.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} list [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


FabricVLAN.prototype.do_get = function (subcmd, opts, args, callback) {
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (args.length !== 1) {
        return callback(new Error('vlan_id must be specified'));
    }

    return this.cloudapi.getFabricVlan(args[0], commonCb);
};

FabricVLAN.prototype.do_get.options = GENERAL_OPTS;
FabricVLAN.prototype.do_get.help = (
    'Get a fabric VLAN by ID.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} get [OPTIONS] <vlan_id>\n' +
    '\n' +
    '{{options}}'
);


FabricVLAN.prototype.do_create = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    return self.cloudapi.createFabricVlan(opts, commonCb);
};

FabricVLAN.prototype.do_create.options = [
    REQUIRED.vlan,
    REQUIRED.name,
    OPTIONAL.description,
    HELP_OPT
];
FabricVLAN.prototype.do_create.help = (
    'Create a new fabric vlan.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} create [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


FabricVLAN.prototype.do_update = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (args.length !== 1) {
        return callback(new Error('vlan_id must be specified'));
    }

    return self.cloudapi.updateFabricVlan(args[0], opts, commonCb);
};

FabricVLAN.prototype.do_update.options = [
    OPTIONAL.name,
    OPTIONAL.description,
    HELP_OPT
];
FabricVLAN.prototype.do_update.help = (
    'Update a fabric vlan.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} update [OPTIONS] <vlan_id>\n' +
    '\n' +
    '{{options}}'
);


FabricVLAN.prototype.do_delete = function (subcmd, opts, args, callback) {
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (args.length !== 1) {
        return callback(new Error('vlan_id must be specified'));
    }

    return this.cloudapi.deleteFabricVlan(args[0], commonCb);

};

FabricVLAN.prototype.do_delete.options = GENERAL_OPTS;
FabricVLAN.prototype.do_delete.help = (
    'Delete a vlan.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} delete [OPTIONS] <vlan_id>\n' +
    '\n' +
    '{{options}}'
);



// --- FabricNetwork node-cmdln object

function FabricNetwork(top) {
    this.top = top;
    Cmdln.call(this, {
        name: 'sdc-fabric network',
        desc: 'Manage fabric networks'
    });
}
util.inherits(FabricNetwork, Cmdln);


FabricNetwork.prototype.init = function networkInit(opts, args, callback) {
    this.cloudapi = this.top.cloudapi;
    Cmdln.prototype.init.apply(this, arguments);
};


FabricNetwork.prototype.do_list = function (subcmd, opts, args, callback) {
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    return this.cloudapi.listFabricNetworks(opts, commonCb);
};

FabricNetwork.prototype.do_list.options = [
    OPTIONAL.vlanFilter,
    HELP_OPT
];
FabricNetwork.prototype.do_list.help = (
    'List fabric networks.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} list [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);



FabricNetwork.prototype.do_get = function (subcmd, opts, args, callback) {
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    return this.cloudapi.getFabricNetwork(args[0], commonCb);
};

FabricNetwork.prototype.do_get.options = GENERAL_OPTS;
FabricNetwork.prototype.do_get.help = (
    'Get a fabric network by ID.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} get [OPTIONS] <network_id>\n' +
    '\n' +
    '{{options}}'
);


FabricNetwork.prototype.do_create = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    // to match up with the behavior of other node-smartdc commands, we also
    // want to be able to accept CSV and JSON here
    if (opts.resolvers && opts.resolvers.length === 1) {
        try {
            opts.resolvers = JSON.parse(opts.resolvers[0]);
        } catch (e) {
            opts.resolvers = opts.resolvers[0].split(',');
        }
    }

    if (opts.routes) {
        opts.routes = JSON.parse(opts.routes);
    }

    return self.cloudapi.createFabricNetwork(opts, commonCb);
};

FabricNetwork.prototype.do_create.options = [
    REQUIRED.vlan,
    REQUIRED.name,
    REQUIRED.subnet,
    REQUIRED.provision_start_ip,
    REQUIRED.provision_end_ip,
    REQUIRED.resolvers,
    OPTIONAL.no_internet_nat,
    OPTIONAL.gateway,
    OPTIONAL.description,
    OPTIONAL.routes,
    HELP_OPT
];
FabricNetwork.prototype.do_create.help = (
    'Create a new fabric network.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} create [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


FabricNetwork.prototype.do_delete = function (subcmd, opts, args, callback) {
    var self = this;

    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (args.length !== 1) {
        return callback(new Error('network_id must be specified'));
    }

    return this.cloudapi.getFabricNetwork(args[0],
            function _afterGet(err, net) {
        if (err) {
            return commonCb(err);
        }

        return self.cloudapi.deleteFabricNetwork(net.vlan_id, args[0],
                commonCb);
    });
};

FabricNetwork.prototype.do_delete.options = GENERAL_OPTS;
FabricNetwork.prototype.do_delete.help = (
    'Delete a fabric network.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} delete [OPTIONS] <network_id>\n' +
    '\n' +
    '{{options}}'
);


FabricNetwork.prototype.do_get_default =
        function (subcmd, opts, args, callback) {
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    return this.cloudapi.getConfig(function _afterConfGet(err, res) {
        if (err) {
            commonCb(err);
            return;
        }

        if (!res.default_network) {
            // Rather than create a restify-like error that will end up in
            // printErr(), just emulate its behaviour:
            console.error(util.format('%s: default network not found',
                    path.basename(process.argv[1])));
            process.exit(3);
        }

        shared.emit(res.default_network);
        shared.exit(0);
    });
};

FabricNetwork.prototype.do_get_default.options = GENERAL_OPTS;
FabricNetwork.prototype.do_get_default.help = (
    'Get your default fabric network for this datacenter.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} get-default [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


FabricNetwork.prototype.do_set_default =
        function (subcmd, opts, args, callback) {
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (args.length !== 1) {
        return callback(new Error('network_id must be specified'));
    }

    var params = {
        default_network: args[0]
    };

    return this.cloudapi.updateConfig(params, function _afterConfSet(err, res) {
        if (err) {
            commonCb(err);
            return;
        }

        if (!res.default_network) {
            // Rather than create a restify-like error that will end up in
            // printErr(), just emulate its behaviour:
            console.error(util.format('%s: default network not found',
                    path.basename(process.argv[1])));
            process.exit(3);
        }

        shared.emit(res.default_network);
        shared.exit(0);
    });
};

FabricNetwork.prototype.do_set_default.options = GENERAL_OPTS;
FabricNetwork.prototype.do_set_default.help = (
    'Set your default fabric network for this datacenter.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} set-default [OPTIONS] <network_id>\n' +
    '\n' +
    '{{options}}'
);



// --- The paren SDCfabric node-cmdln object



function SDCfabric() {
    Cmdln.call(this, {
        name: 'sdc-fabric',
        desc: 'SmartDataCenter fabric operations',
        options: shared.DEFAULT_OPTIONS,
        helpOpts: {
            includeEnv: true
        }
    });
}
util.inherits(SDCfabric, Cmdln);

SDCfabric.prototype.init = function init(opts, args, callback) {
    opts.api_version = opts.api_version || API_VERSION;
    return shared.checkRequiredOptions.call(this, opts, args, callback);
};

SDCfabric.prototype.do_vlan = FabricVLAN;
SDCfabric.prototype.do_network = FabricNetwork;



// --- Mainline

if (require.main === module) {
    cmdln.main(new SDCfabric());
}
